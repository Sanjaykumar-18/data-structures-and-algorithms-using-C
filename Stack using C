#include<stdio.h>

#define MAX_SIZE 10

int stack[MAX_SIZE];
int top = -1;

int isempty() {
    return (top == -1);
}

int isfull() {
    return (top == MAX_SIZE - 1);
}

void push(int data) {
    if (!isfull()) {
        stack[++top] = data;
    } else {
        printf("The stack is full.\n");
    }
}

int pop() {
    if (!isempty()) {
        return stack[top--];
    } else {
        printf("The stack is empty.\n");
      
    }
}

int peek() {
    if (!isempty()) {
        return stack[top];
    } else {
        printf("The stack is empty.\n");
      
    }
}

void display() {
    if (!isempty()) {
        printf("Stack elements are:\n");
        for (int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
    } else {
        printf("The stack is empty.\n");
    }
}

int main() {
    int choice, data;
    int flag = 1;

    while (flag) {
        printf("\n1. Push\n2. Pop\n3. Peek\n4. Check if stack is full\n5. Check if stack is empty\n6. Display stack\n7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &data);
                push(data);
                break;
            case 2:
                data = pop();
                if (data != -1) {
                    printf("Popped element: %d\n", data);
                }
                break;
            case 3:
                data = peek();
                if (data != -1) {
                    printf("Top element: %d\n", data);
                }
                break;
            case 4:
                printf("Stack full: %s\n", isfull() ? "true" : "false");
                break;
            case 5:
                printf("Stack empty: %s\n", isempty() ? "true" : "false");
                break;
            case 6:
                display();
                break;
            case 7:
                flag = 0; 
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    }

    return 0;
}

